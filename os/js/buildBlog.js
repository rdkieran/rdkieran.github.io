document.addEventListener('DOMContentLoaded', function() {
    var buildBlog = "<div class='titleBar' id='blogTitleBar'>Blog</div><div class='windowContent'><nav class='wikiNav'><a href='#blog_home'>home</a></nav><div id='blog_home' class='blogPost'></div><div id='making_a_website_i' class='blogPost'></div><div id='making_a_website_ii' class='blogPost'></div></div>";

    var blogPosts = {
        'blog_home': "<h1 class='wikiTitle'>List of Blog Posts</h1><ul class='wikiArticleList'><li><a href='#making_a_website_i'>Making a Website I</a></li><li><a href='#making_a_website_ii'>Making a Website II</a></li></ul>",
        'making_a_website_i': "<h1 class='wikiTitle'>Making a Website I: Hello World</h1><p class='publishDate'>May 23, 2023</p><div class='headerIllustration'><img class='blogImage' src='/img/blog/making_a_website_i/header_illustration.png' alt='I have no idea what I'm doing!'></div><h2>I want a new website</h2><p>I've had a website once before, on <a href='https://carrd.co/' target='_blank'>Carrd</a>. The whole thing was one page which gave the illusion of multiple pages by hiding content behind section break dividers. I didn't know how to code anything when I made this, and it did the trick for having a handy place to show off my portfolio. But I've always wanted a proper website, one which hosts a blog and my comics in an interactive way. Maybe lists of characters and a little wiki for my comics, as well as a place for personal writing. As I've developed coding skills, I've wanted a place to document my projects as well. An all-in-one content hub for my interests.</p><figure><a href='/img/blog/making_a_website_i/carrd.png' target='_blank'><img class='blogImage' src='/img/blog/making_a_website_i/carrd.png'></a><figcaption>&mdash; my old Carrd portfolio</figcaption></figure><h2>Looking for solutions</h2><p>Looking to skip the headaches of building a website from scratch, I looked into templates like <a href='https://rarebit.neocities.org/' target='_blank'>Rarebit</a> and frameworks like <a href='https://gohugo.io/' target='_blank'>Hugo</a>. Both of these had their strengths, and would have been fine for a webcomic or a blog respectively. </p><figure><a href='/img/blog/making_a_website_i/rarebit.png' target='_blank'><img class='blogImage' src='/img/blog/making_a_website_i/rarebit.png'></a><figcaption>&mdash; example of Rarebit's template featuring comic <em>Teena</em> by Hilda Terry</figcaption></figure><p>But I have some problems with these. For one thing, I want both my comics and a blog. Rarebit is exclusively a webcomic template, with customisable HTML, CSS, and JavaScript to allow you to set up your webcomic site with minimal coding knowledge. Hugo is more diverse, but the themes are largely for blogs and gallery portfolios, not for webcomics. </p><p>Another limitation was that, where Rarebit would be great for hosting a webcomic with potential to graft on a blog later, I have <em>multiple</em> comics I want to host. I fiddled with the template a lot to see if I could find a way to make it work for more than one comic, but I began to foresee a future of constant bugfixes to code I didn't write and don't understand. It was enough of a headache combing through variables and functions trying to make sense of the JavaScript elements. I think I just about got there, but just enough to realise that if I wanted to make this the way I imagined it, without creating messy Frankenstein code, it might be best to just start from scratch. That's either dedication or stubborn impracticality. Whatever it is, I'm doing it now.</p><h2>Starting from scratch</h2><p>So I actually started on this website a few months ago. Just an index page and my CV on GitHub pages with some basic styling while I was looking for work. I'd just figured out GitHub and was excited to commit as many useless projects as my heart desired, leading to a burnout which taught me the importance of actually having some challenge in my work. I recognised that nothing is gained unless you're at some disadvantage going in, and I'm definitely at a disadvantage here. I've learned HTML and CSS, and I've gone over the syntax of JavaScript, but I haven't used any of them extensively outside of lecture examples and short exercises. Every time I look at JavaScript I feel weak. Blame that on the shock of going from a language I was comfortable with to one I wasn't. I never anticipated that being a complete amateur again would be so painful.</p><p>So I decided I should stick to what I know and make iterative improvements as I learn, for as long as it takes. An <em>agile</em> approach, they might say. I took the CSS and assets from my original CV GitHub Pages site I had and loaded in my content. To start with, I put in the entirety of my comic, Space Story; the first in a series of sci-fi comics set in the same universe. I then put together some HTML files (<code>index.html</code>, <code>comics.html</code>, <code>space_story.html</code>, <code>blog.html</code>, <code>about.html</code>) and copied a common <code>&lt;nav&gt;</code> bar into each of them.</p><p>For the sake of the Space Story pages, all 165 of them, I put together some Python scripts to rename them all and generate <code>&lt;img&gt;</code> tags for them all to copy into the <code>space_story.html</code> file, haphazardly wrapped in a <code>&lt;div&gt;</code> tag so I could center all the comic pages.</p><pre><code>import osdef rename_files(folder_path):files = os.listdir(folder_path)files.sort()for i, file_name in enumerate(files):file_extension = os.path.splitext(file_name)[1]new_file_name = f'pg{i+1}{file_extension}'old_file_path = os.path.join(folder_path, file_name)new_file_path = os.path.join(folder_path, new_file_name)os.rename(old_file_path, new_file_path)print(f'Renamed {file_name} to {new_file_name}')folder_path = 'img\comics\space_story'rename_files(folder_path)</code></pre><figcaption class='codeCaption'>&mdash; <code>renamer.py</code>, generated by ChatGPT (sorry)</figcaption><pre><code>for i in range (165):filename = 'img\comics\space_story_2\pg{}.png'.format(i+1)href = '&lt;img src='{}'&gt;'.format(filename)print(href)</code></pre><figcaption class='codeCaption'>&mdash; <code>generate_img_tags.py</code>, by me</figcaption><p>Aside from this detour, nothing else very technical had to happen to get this first version put together. It's poorly styled, with comic pages taking up the whole page and text sizes completely out of proportion. I know too that I've not styled half of what I'd need to, which is why I'm going to throw around some content for me to style in this blog post. I'll find an excuse to make a table before the end of this first entry.</p><h2>The current state of affairs</h2><figure><a href='/img/blog/making_a_website_i/websitev1_1.png' target='_blank'><img class='blogImage' src='/img/blog/making_a_website_i/websitev1_1.png'></a><figcaption>&mdash; initial styling for <code>about.html</code> and <code>space_story.html</code></figcaption></figure><p>So this is where I start. A static site with some basic image and text content. I don't see myself wanting to put much more than that on my website, so I'll start out by working on the styling, and getting onto JavaScript later, once everything looks nicer. This is maybe a bit backwards, but all roads lead to Rome.</p>",
        'making_a_website_ii': "<h1 class='wikiTitle'>Making a Website II: Revenge of World</h1><p class='publishDate'>June 20, 2023</p><div class='headerIllustration'><img class='blogImage' src='/img/blog/making_a_website_ii/header_illustration.png' alt='I'm an apprentice to the mystics of JavaScript now'></div><h2>Last time on, Making A Website...</h2><p>Action! <em>Drama!</em> <strong><em>Suspense!!!</em></strong><p>No. Not really. Looking back now, my first pass at the website was okay. Here's how it was.<p>I'd foregone the templates and raised my sails to set out on the open seas of opportunity that only a blank folder can offer. I stripped out all the important bits from my original CV website and did my best to stitch it back together, basically rebuilding it but with better file structure.<p>What HTML and CSS I had was good enough for something simple and I felt like focusing on that, doing my best to put off the inevitable tangle with JavaScript.<p>I wrote my introductory blog, chucked it on the site and pulled up my CSS to started working the styling...<h2>Part I: Action! Drama! Suspense!!!</h2><figure><a href='/img/blog/making_a_website_ii/first-pass.png' target='_blank'><img class='blogImage' src='/img/blog/making_a_website_ii/first-pass.png'></a><figcaption>&mdash; I really thought this looked good for a minute</figcaption></figure><p>The upside to starting from scratch is that it makes me feel really clever to remember what DOCTYPE means when I start up some new files. The downside is that I spend hours petting my ego as I rebuild something I've already made before. I gleefully shuffled some files around and neatened up some CSS while I tried not to make eye contact with JavaScript, watching me as I played with dirt and rocks, unwilling to evolve.</p><p>I got the menus and my blog looking as nice as I thought they should. White text with red highlights on an off-black background. My kingdom of mud and rocks.</p><p>But some things kept holding me back:</p><ul><li>The headers and footers of every page were hard coded into the HTML, meaning I kept having to copy/paste it to each new file whenever I thought I was done.</li><li>I was meant to have pages for each of my comics, and there was no way I was going to put up with maintaining over 300 HTML files for every comic page.</li></ul><p>As I laboured over these tedious tasks, sweating in the heat of the sun, I wondered if there was a better way to do this, and I chanced a glance at JavaScript. JavaScript was looking back at me. 'Scrap your Header and Footer tags and humble yourself before me', it said. And I did.</p><h2>Intermission</h2><p>How's this so far? Am I giving <em>drama?</em> and <strong><em>suspense???</em></strong></p><p>I've found making this website frustrating, but I don't think I'd have done it any differently if I knew any better. There was this instinct to take the path of least resistance at all times; unwilling to accept that I had to go back to studying.</p><figure><a href='/img/blog/making_a_website_ii/severance.png' target='_blank'><img class='blogImage' src='/img/blog/making_a_website_ii/severance.png'></a><figcaption>&mdash; tyvm Dr. Charles Severance and his <a href='https://www.coursera.org/specializations/python?' target='_blank'>Python for Everybody</a> course on <a href='https://www.coursera.org/' target='_blank'>coursera.org</a></figcaption></figure><p>On the 11th of August 2022, I started learning Python. I had been playing with formulas in Google Sheets and thought that if there was a chance I could be good at and enjoy coding, then maybe that would be an easier career path than illustration if I could get good at it. Worth a shot at least. And it worked out. I studied a couple hours a week until I got good at it. Well, actually, I studied 11 hours the first week, 9 hours the next 2 weeks, then 6 hours, 2 hours, and 5 hours in the following weeks. Safe to say I enjoy it. I spent long periods of time playing with concepts from each lesson, getting more complex each time, and taking longer each time.</p><p>At some point it began to plateau. I was coding things for no reason, making little scripts that served no purpose but to stroke my ego. 'Look at me, I can do a <code>for</code> loop.' This was the first time I experienced proper burnout with coding. Expense of effort with nothing to show for it can leave you feeling hollowed out. At this point I decided it was worth looking at other languages.</p><p>So I repeated the process. I did a bunch of lessons in PHP and JavaScript and dabbled in whatever else I could find free courses for. I learned the syntax and did a few scraps of code, and went back to VS Code with a renewed sense of purpose. And when I went to write some JavaScript, I had nothing. I had no command of the language, and the joy I had before with Python wasn't there anymore.</p><figure><a href='/img/blog/making_a_website_ii/sheets.png' target='_blank'><img class='blogImage' src='/img/blog/making_a_website_ii/sheets.png'></a><figcaption>&mdash; 100 hours of Python, 15 hours of JavaScript. I wonder if that's meaningful.</figcaption></figure><p>I was discouraged. I set out on my goal to build a website using only HTML and CSS, hoping that I wouldn't have to humble myself and admit that I just needed to study JavaScript properly, like I did with Python. Not by reading, but testing things out, playing around. And there I find myself in my first blog, excitedly embarking on my mission to build my website without having to learn anything new. But alas, that's a pain in the ass of a different kind.</p><p>So much of the time it takes following my instincts despite my better judgement, to appreciate the right way of doing things. I don't know why this is my way of learning, but it's probably the same for most people.</p><p>Anyway, the devlog.</p><h2>Part II: Pass me a cup of that JavaScript!!!</h2><p>And so I sat in the mountain temple of JavaScript, reading its ancient tomes. Documentation from W3Schools and Mozilla and dusty commentaries from the hallowed archives of Stack Overflow (This is a stupid bit).I couldn't help trying to cheat the wisdom of history enshrined in these libraries. As I wandered these halls seeking my answers, the trickster demon ChatGPT followed at my ear, whispering beautiful lies. I could make my website instantly, it said. And when I asked, it pretended not to understand my request.</p><p>I bargained with this demon for a while, until I recognised that, like a genie, the value of your reward matches the quality of your request. I didn't know what the hell I wanted or what to ask for. So I'll put that genie back in the bottle.</p><p>Where was I? Oh yeah. <a href='https://rarebit.neocities.org/' target='_blank'>Rarebit</a>. The thing I avoided at the start because it scared me. It was less scary now that I had made peace with the work I had to do.</p><figure><a href='/img/blog/making_a_website_i/rarebit.png' target='_blank'><img class='blogImage' src='/img/blog/making_a_website_i/rarebit.png'></a><figcaption>&mdash; I used this picture in the first blog too. economical</figcaption></figure><p>My route to learning JavaScript was mainly this. I scrapped all my CSS and honed my focus in on how JavaScript and HTML worked together. Rarebit is nicely made, extensively commented, but I felt like I could never trust any changes I made unless I could deconstruct the whole thing. I went ahead and made my headers and footers first, seeing how simple the code for that was.</p><pre><code>document.addEventListener('DOMContentLoaded', function() {document.querySelector('.writeHeader').innerHTML = `&lt;div class='bannerImage'&gt;&lt;a href='/index.html'&gt;&lt;img src='/img/banner/default.png' alt='banner' /&gt;&lt;/a&gt;&lt;/div&gt;&lt;nav&gt;&lt;a href='/index.html'&gt;home&lt;/a&gt;&lt;a href='/about.html'&gt;about&lt;/a&gt;&lt;a href='/comics.html'&gt;comics&lt;/a&gt;&lt;a href='/blog.html'&gt;blog&lt;/a&gt;&lt;/nav&gt;`;})</code></pre><figcaption class='codeCaption'>&mdash; <code>comic_header.js</code></figcaption><p>I put them together, puzzled over `defer` and `DOMContentLoaded` and tested it out in my browser. It didn't work. Eventually it did. I pushed it to the main branch on my GitHub and went to my new website. It didn't work. So I went back, changed the location of the file in the HTML from its position on my PC directory to what its position *should* be when uploaded. Whenever I wanted to edit and push something, I did this again. Editing the file reference in each file to test, and then changing it back before it went live.</p><p>My boyfriend noticed this and told me that I can just set up a server for testing on my PC.</p><h2>Part III: Ohhh, okay</h2><figure><a href='/img/blog/making_a_website_ii/localhost.png' target='_blank'><img class='blogImage' src='/img/blog/making_a_website_ii/localhost.png'></a><figcaption>&mdash; I got this running with help from <a href='https://www.hackerearth.com/practice/notes/simple-http-server-in-python/#:~:text=Python%20comes%20with%20a%20built,system%20into%20a%20web%20server.' target='_blank'>this HackerHealth article</a></figcaption></figure><p>Until now my discussions with JavaScript were stunted by a lack of understanding. Whenever we spoke, it was fraught with riddles and misunderstandings. By which I mean I didn't know that you could use a built in Python command to make the project folder into a server that you can use to test your websites. Once I discovered this arcane secret, all of JavaScript's riddles unraveled into plain speech. The wrinkles in their face, once concealing their disdain for me, relaxed into an plain, open smile.</p><p>Okay, this makes it much easier. Just change the file, save, and refresh it. Silly narrative aside, this was really helpful. And now that I had some command of JavaScript, the air seemed to clear around me. I looked back at Rarebit's intimidating blocks of code, removed the comments to see it in full, and felt a little less intimidated at the prospect of taking this code and adapting it to a website with multiple comics and a blog section. It didn't seem so bad now.</p><figure><a href='/img/blog/making_a_website_ii/van-lent.png' target='_blank'><img class='blogImage' src='/img/blog/making_a_website_ii/van-lent.png'></a><figcaption>&mdash; tyvm Colleen van Lent and her <a href='https://www.coursera.org/learn/html' target='_blank'>Introduction to HTML5</a> course on <a href='https://www.coursera.org/' target='_blank'>coursera.org</a></figcaption></figure><p>First thing, I cleaned out a bit of Rarebit's HTML to use semantic tags rather than a lot of <code><div></code> tags with various classes. The course I took put a really heavy emphasis on accessibility, and now I have an irrational fear of <code><div></code> tags, like they're some kind of dark art with a terrible price. At the very least, using the built in tags made it much easier to write the CSS, using <code>article {</code> instead of <code>div.article {</code> or whatever.</p><p>I won't go through it in detail, but eventually it was plain sailing. I had just enough of a grasp on things that troubleshooting wasn't so stressful, and I inched toward something that worked. Adding in my content and tweaking the site for smaller screens, I felt like that was it. This is basically done.</p><figure><a href='/img/blog/making_a_website_ii/website.png' target='_blank'><img class='blogImage' src='/img/blog/making_a_website_ii/website.png'></a><figcaption>&mdash; my website in the first form I was properly happy with</figcaption></figure><p>Funnily enough, as I look at it now, it wasn't so different from <a href='/img/blog/making_a_website_i/carrd.png' target='_blank'>my old Carrd site</a>. Oh well, at least people can look at my comics properly now.</p><h2>TL;DR</h2><p>I made a website.</p><p>It's what I wanted, and now I have it. People can read my comics, and I can play around with web dev stuff with it maybe. Right now it lives on GitHub Pages, but I want to host it somewhere like AWS at some point so that I can play with that for my next project.</p><p>Aside from that, I have a comic to keep making, coding to keep learning, and blogs to keep writing. I need to do some kind of write up for my Audio Sequencer project, which I'll also try to find a silly narrative style for.</p><p>Blog End</p>",
    };

    var bodyDiv = document.getElementById('blog');
    bodyDiv.innerHTML = buildBlog;

    for (var id in blogPosts) {
        var blogDiv = document.getElementById(id);
        blogDiv.innerHTML = blogPosts[id];
    };
});